#!/bin/perl
use strict;

my $data_dir = "data";
if (not -d $data_dir) {
    mkdir $data_dir;
}

my @protocol = ("Reno/Reno", "NewReno/Reno", "Vegas/Vegas", "NewReno/Vegas");
foreach my $p (@protocol) {
# set initial value
my ($p1,$p2) = split '/', $p; 
my $latency_counter = 0;
my $cbr_rate = 1;
my $total_pkg_size = 0;
my $start_time = 0;
my $end_time = 0;
my $real_start_time = 0;
my $real_end_time = 0;
my $max_end_time = 55;
my $total_throughput = 0;
my $total_latency = 0;
my $total_sent= 0;
my $total_dropped = 0;
my $flag = 0;
my $variant_type = "1";
my $variant2_result = "";


# result of NS2 file
my $filename2 = "./data/exp2_".$p1."_".$p2.".data";
# open data file
open(my $fh2, '>', $filename2) or die "cannot create file $filename2";
# data file header
print $fh2 "cbr variant throughput throughput_stddev latency latency_stddev pdr pdr_stddev\n";

# outer while loop that keeps adding crb_rate by 0.5
while ($cbr_rate <= 10) {
  $total_throughput = 0;
  $total_latency = 0;
  $latency_counter = 0;
  $total_sent= 0;
  $total_dropped = 0;
  $start_time = 5;
  $end_time = 10;


  #run NS2 simulator
  my $result=`/course/cs4700f12/ns-allinone-2.35/bin/ns ./exp2.tcl $cbr_rate $p1 $p2`;

  # inner while loop that test each experiment multiple times
  $total_pkg_size = 0;
  $flag = 0;

  # result of NS2 file
  my $filename = "./exp2_".$p1."_".$p2."_".$cbr_rate.".tr";
  my @results_throughput;
  my @results_latency;
  my @results_pdr;
  my %latency_map;

  # open NS2 result file
  open(my $fh, '<', $filename) or die "error while opening file $filename";

  # read file line by line
  while (my $row = <$fh>) {
    my @elems = split ' ', $row; 
    my $event = @elems[0];
    my $event_time=@elems[1];
    my $from = @elems[2];
    my $to = @elems[3];
    my $pkg_size = @elems[5];
    my $fid = @elems[7];
    my $pkt_id = @elems[10];
    if(($event_time >= $start_time) && $flag == 0) {
      $flag = 1;
      $real_start_time = $event_time;
    }

    # for throughput
    if($event eq "r" && $from  eq "2" && $to eq ($variant_type eq "1"? "3":"5") && $fid eq $variant_type && $flag == 1) {
      $total_pkg_size = $total_pkg_size + $pkg_size;
    }

    # for latency
    if($event eq 'r' && $to eq ($variant_type eq "1"? "0":"4") && $flag == 1 && $fid eq $variant_type) {
      $latency_counter = $latency_counter + 1;
      $total_latency = $total_latency + ($event_time - $latency_map{$pkt_id});
    }

    if($event eq '+' && $from eq ($variant_type eq "1"? "0":"4") && $flag == 1 && $fid eq $variant_type) {
      $latency_map{$pkt_id} = $event_time;
    }

    # for package drop rate
    if($event eq '+' && $from eq ($variant_type eq "1"? "0":"4") && $flag == 1 && $fid eq $variant_type) {
      $total_sent = $total_sent + 1;
    }
    if($event eq 'd' && $fid eq $variant_type && $flag == 1 && $fid eq $variant_type) {
      $total_dropped = $total_dropped + 1;
    }
    # end of one test
    if($event_time >= $end_time) {
      $real_end_time = $event_time;
      # throughput
      my $throughput = ($total_pkg_size * 8) / (($real_end_time - $real_start_time) * 1000);
      $total_throughput = $total_throughput + $throughput;
      push @results_throughput, $throughput;
      # latency
      my $latency = $total_latency / $latency_counter;
      my %latency_map;
      push @results_latency, $latency;
      # package drop rate  
      my $pdr = 100 * $total_dropped / $total_sent;
      push @results_pdr, $pdr;

      # summary for one test
      print "===".$variant_type."==="."file:".$filename." throughput:".$throughput.", latency:".$latency." pdr:".$pdr."\n";

      # initialize 
      $total_pkg_size = 0;
      $total_latency = 0;
      $latency_counter = 0;
      $total_sent= 0;
      $total_dropped = 0;


      $flag = 0;
      # increase start and end time
      $start_time = $start_time + 5;
      $end_time = $end_time + 5;
    }

    # end of one cbr_rate test
    if($event_time >= $max_end_time) {
      # throughput
      my $mean_throughput  = $total_throughput / (scalar @results_throughput);
      my $delta_throughput = 0;
      foreach my $i(0 .. $#results_throughput) {
        $delta_throughput  = ($results_throughput[$i] - $mean_throughput )**2 + $delta_throughput;
      }
      my $stddev_throughput  = sqrt($delta_throughput  / ((scalar @results_throughput) - 1));

      # latency
      my $sum_latency = 0;
      foreach my $num (@results_latency) {
        $sum_latency = $sum_latency + $num;
      }
      my $mean_latency= $sum_latency / (scalar @results_latency);
      my $delta_latency = 0;
      foreach my $i(0 .. $#results_latency) {
        $delta_latency = ($results_latency[$i] - $mean_latency)**2 + $delta_latency;
      }
      my $stddev_latency = sqrt($delta_latency / ((scalar @results_latency ) - 1));


      # package drop rate  
      my $sum_pdr = 0;
      foreach my $num (@results_pdr) {
        $sum_pdr = $sum_pdr + $num;
      }
      my $mean_pdr = $sum_pdr / (scalar @results_pdr);
      my $delta_pdr = 0;
      foreach my $i(0 .. $#results_pdr) {
        $delta_pdr = ($results_pdr[$i] - $mean_pdr)**2 + $delta_pdr;
      }
      my $stddev_pdr = sqrt($delta_pdr / ((scalar @results_pdr) - 1));
      
      if ($variant_type eq "2") {
      # summary
      print "-------------------Summary--------------------\n";
      print "Variant2: ".$p2."\n";
      print "mean_throughput :".$mean_throughput .",  throughput stddev: ".$stddev_throughput ."\n";
      print "mean_latency :".$mean_latency.", latency stddev: ".$stddev_latency."\n";
      print "mean_pdr :".$mean_pdr.", pdr stddev: ".$stddev_pdr."\n";
      print "----------------------------------------------\n";

      $variant2_result = $variant2_result."$cbr_rate"." ".$p2."1 ".$mean_throughput." ".$stddev_throughput." ".$mean_latency." ".$stddev_latency." ".$mean_pdr." ".$stddev_pdr."\n";
      $cbr_rate = $cbr_rate + 0.5 ;
      $variant_type = "1";
      
      # clean up
      `rm *.tr`;
      last;
      } elsif ($variant_type eq "1") {
      # summary
      print "-------------------Summary--------------------\n";
      print "Variant1: ".$p1."\n";
      print "mean_throughput :".$mean_throughput .",  throughput stddev: ".$stddev_throughput ."\n";
      print "mean_latency :".$mean_latency.", latency stddev: ".$stddev_latency."\n";
      print "mean_pdr :".$mean_pdr.", pdr stddev: ".$stddev_pdr."\n";
      print "----------------------------------------------\n";

      print $fh2 "$cbr_rate"." ".$p1."2 ".$mean_throughput." ".$stddev_throughput." ".$mean_latency." ".$stddev_latency." ".$mean_pdr." ".$stddev_pdr."\n";

      $variant_type = "2"; 
      last;
     }
    }

    } # end reading file in while loop
    close($fh);
}
  print $fh2 $variant2_result;
close($fh2);
}

